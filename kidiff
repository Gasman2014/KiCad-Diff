#!/usr/bin/env python3
#
# A python script to select two revisions of a Kicad pcbnew layout
# held in a suitable version control repository and produce a graphical diff
# of generated svg files in a web browser.

import argparse
import os
import shutil
import re
import signal
import sys

from tkinter import filedialog, Tk, Toplevel, TclError, messagebox
from tkUI import runGUI

import webbrowser
import http.server
import socketserver

import settings

import scms.fossil as fossil
import scms.git as git
import scms.svn as svn
import scms.generic as generic

import assets.html_data as custom_page


socketserver.TCPServer.allow_reuse_address = True
script_path = os.path.dirname(os.path.realpath(__file__))
assets_folder = os.path.join(script_path, 'assets')


layerCols = {
    'F_Cu'      : "#952927",
    'B_Cu'      : "#359632",
    'B_Paste'   : "#3DC9C9",
    'F_Paste'   : "#969696",
    'F_SilkS'   : "#339697",
    'B_SilkS'   : "#481649",
    'B_Mask'    : "#943197",
    'F_Mask'    : "#943197",
    'Edge_Cuts' : "#C9C83B",
    'Margin'    : "#D357D2",
    'In1_Cu'    : "#C2C200",
    'In2_Cu'    : "#C200C2",
    'In3_Cu'    : "#C20000",
    'In4_Cu'    : "#0000C2",
    'Dwgs_User' : "#0364D3",
    'Cmts_User' : "#7AC0F4",
    'Eco1_User' : "#008500",
    'Eco2_User' : "#C2C200",
    'B_Fab'     : "#858585",
    'F_Fab'     : "#C2C200",
    'B_Adhes'   : "#3545A8",
    'F_Adhes'   : "#A74AA8",
    'B_CrtYd'   : "#D3D04B",
    'F_CrtYd'   : "#A7A7A7",
}

Handler = http.server.SimpleHTTPRequestHandler


def select_project_gui(display):
    '''File select dialogue. Opens Tk File browser and
    selector set for .kicad_pcb files. Returns path and file name
    '''
    gui = Tk(display)
    gui.withdraw()
    gui.update()

    try:
        # call a dummy dialog with an impossible option to initialize the file
        # dialog without really getting a dialog window; this will throw a
        # TclError, so we need a try...except :
        try:
            gui.call('tk_getOpenFile', '-foobarbaz')
        except TclError:
            pass
        gui.call('set', '::tk::dialog::file::showHiddenVar', '0')
    except Exception:
        pass

    selected = filedialog.askopenfile(
        initialdir=os.getcwd(),
        title="Select the Kicad board",
        filetypes=(("KiCad PCB files", "*.kicad_pcb"), ("all files", "*.*")))

    if selected:
        repo_path, kicad_pcb = os.path.split(selected.name)
    else:
        gui.destroy()
        exit()

    gui.destroy()

    return (repo_path, kicad_pcb)


def check_project_scms(prjctPath):
    '''Determines which SCM is being used by the project.
    Current order of priority: Git > Fossil > SVN
    '''

    scms = []

    if is_tool_available("git"):
        cmd = ['git', 'status']
        stdout, stderr = settings.run_cmd(prjctPath, cmd)
        if ((stdout != '') & (stderr == '')):
            scms.append('git')

    if is_tool_available("fossil"):
        cmd = ['fossil', 'status']
        stdout, stderr = settings.run_cmd(prjctPath, cmd)
        if (stdout != ''):
            scms.append('fossil')

    if is_tool_available("svn"):
        cmd = ['svn', 'log']  # | perl -l4svn log0pe "s/^-+/\n/"'.format(prjctPath=prjctPath)
        stdout, stderr = settings.run_cmd(prjctPath, cmd)
        if ((stdout != '') & (stderr == '')):
            scms.append('svn')

    return scms


def makeSVG(d1, d2, board_file, kicad_project_path, prjctPath):
    '''Hands off required .kicad_pcb files to "plotPCB2.py"
    and generate .svg files. Routine is
    v quick so all layers are plotted to svg.'''

    print("")
    print("Generating board files")

    d1 = d1[:7]
    d2 = d2[:7]

    d1SVG = os.path.join(prjctPath, settings.plotDir, kicad_project_path, d1)
    d2SVG = os.path.join(prjctPath, settings.plotDir, kicad_project_path, d2)

    Diff1 = os.path.join(d1SVG, board_file)
    Diff2 = os.path.join(d2SVG, board_file)
    print("")
    print("Setting paths")
    print("Diff1: ", Diff1)
    print("Diff2: ", Diff2)

    if not os.path.exists(d1SVG):
        os.makedirs(d1SVG)

    if not os.path.exists(d2SVG):
        os.makedirs(d2SVG)

    plot1Cmd = [settings.plotProg, Diff1, '-o', d1SVG]
    plot2Cmd = [settings.plotProg, Diff2, '-o', d2SVG]

    print("")
    print("Plot Commands:")
    print(plot1Cmd)
    print(plot2Cmd)

    stdout, stderr = settings.run_cmd(prjctPath, plot1Cmd)
    plotDims1 = stdout.splitlines()
    errors = stderr

    if errors != "":
        print(stdout)
        print("Plot1 error: " + errors)
        exit(1)

    stdout, stderr = settings.run_cmd(prjctPath, plot2Cmd)
    plotDims2 = stdout.splitlines()
    errors = stderr

    if errors != "":
        print(stdout)
        print("Plot2 error: " + errors)
        exit(1)

    if not plotDims1 or not plotDims2:
        print('ERROR: Something happened with plotpcb')
        exit(1)

    return (d1, d2, plotDims1[0], plotDims2[0])


def makeSupportFiles(board_file, kicad_project_path, prjctPath):
    '''
    Setup web directories for output
    '''

    webd = os.path.join(prjctPath, settings.plotDir, kicad_project_path, settings.webDir)
    webIndex = os.path.join(webd + '/index.html')
    webStyle = os.path.join(webd + '/style.css')
    webFavicon = os.path.join(webd + '/favicon.ico')

    if not os.path.exists(webd):
        os.makedirs(webd)
        os.makedirs(os.path.join(webd, 'triptych'))

    stylesheet = os.path.join(assets_folder, "style.css")
    shutil.copyfile(stylesheet, webStyle)

    favicon = os.path.join(assets_folder, "favicon.ico")
    shutil.copyfile(favicon, webFavicon)

    if os.path.exists(webIndex):
        os.remove(webIndex)

    return


def getBoardData(board):
    '''Takes a board reference and returns the
    basic parameters from it.
    Might be safer to split off the top section
    before the modules to avoid the possibility of
    recyling keywords like 'title' '''

    prms = {
        'title': "",
        'rev': "",
        'company': "",
        'date': "",
        'page': "",
        'thickness': 0,
        'drawings': 0,
        'tracks': 0,
        'zones': 0,
        'modules': 0,
        'nets': 0
    }

    with open(board, 'r') as f:
        for line in f:
            words = line.strip("\t ()").split()
            for key in prms:
                if len(words) > 1:
                    if key == words[0]:
                        complete = ""
                        for i in range(1, len(words)):
                            complete += words[i].strip("\t ()").replace("\"", "") + " "
                        prms[key] = complete
    return(prms)


def makeOutput(diffDir1, diffDir2, board_file, kicad_project_path, prjctPath, times, dim1, dim2):
    '''Write out HTML using template. Iterate through files in diff directories, generating
    thumbnails and three way view (triptych) page.
    '''

    webd = os.path.join(prjctPath, settings.plotDir, kicad_project_path, settings.webDir)
    webIndex = os.path.join(webd, 'index.html')

    board1 = os.path.join(prjctPath, settings.plotDir, kicad_project_path, diffDir1, board_file)
    board2 = os.path.join(prjctPath, settings.plotDir, kicad_project_path, diffDir2, board_file)

    webOut = open(webIndex, 'w')

    D1DATE, D1TIME, D2DATE, D2TIME = times.split(" ")

    board_1_Info = getBoardData(board1)
    board_2_Info = getBoardData(board2)

    TITLE = board_1_Info.get('title')
    DATE = board_1_Info.get('date')
    COMPANY = board_1_Info.get('company')

    THICK1 = board_1_Info.get('thickness')
    DRAWINGS1 = board_1_Info.get('drawings')
    TRACKS1 = board_1_Info.get('tracks')
    ZONES1 = board_1_Info.get('zones')
    MODULES1 = board_1_Info.get('modules')
    NETS1 = board_1_Info.get('nets')

    # ======

    THICK2 = board_2_Info.get('thickness')
    DRAWINGS2 = board_2_Info.get('drawings')
    TRACKS2 = board_2_Info.get('tracks')
    ZONES2 = board_2_Info.get('zones')
    MODULES2 = board_2_Info.get('modules')
    NETS2 = board_2_Info.get('nets')

    index = custom_page.indexHead.format(
        TITLE=TITLE,
        DATE=DATE,
        COMPANY=COMPANY,
        diffDir1=diffDir1,
        diffDir2=diffDir2,
        THICK1=THICK1,
        THICK2=THICK2,
        D1DATE=D1DATE,
        D2DATE=D2DATE,
        DRAWINGS1=DRAWINGS1,
        DRAWINGS2=DRAWINGS2,
        D1TIME=D1TIME,
        D2TIME=D2TIME,
        TRACKS1=TRACKS1,
        TRACKS2=TRACKS2,
        ZONES1=ZONES1,
        ZONES2=ZONES2,
        MODULES1=MODULES1,
        MODULES2=MODULES2,
        NETS1=NETS1,
        NETS2=NETS2,
    )

    webOut.write(index)

    source = os.path.join(prjctPath, settings.plotDir, kicad_project_path, diffDir1)
    triptychDir = os.path.join(prjctPath, settings.plotDir, kicad_project_path, "web", 'triptych')

    if not os.path.exists(triptychDir):
        os.makedirs(triptychDir)

    diff1 = os.path.join(prjctPath, settings.plotDir, kicad_project_path, diffDir1, board_file)
    diff2 = os.path.join(prjctPath, settings.plotDir, kicad_project_path, diffDir2, board_file)
    output_file = os.path.join(prjctPath, settings.plotDir, kicad_project_path, 'diff.txt')

    stdout, stderr = settings.run_cmd(prjctPath, [settings.diffProg, diff2, diff1])

    with open(output_file, 'a') as fout:
        fout.write(stdout)

    diffCmd2 = [settings.diffProg, '--suppress-common-lines', diff2, diff1]
    stdout, stderr = settings.run_cmd(prjctPath, diffCmd2)

    # diffs = os.fsencode(source)


    for f in os.listdir(source):

        filename = os.fsdecode(f)

        if filename.endswith(".svg"):

            file, file_extension = os.path.splitext(filename)
            triptych = os.path.join(triptychDir, file + '.html')
            *project, layer = filename.split('-')
            layer, ext = layer.split('.')
            prjct, ext = filename.split('.')
            splitted = prjct.split('-')  # Accounts for project names containing hyphens
            prj = "-".join(splitted[0:-1])
            layer = splitted[-1]

            out = custom_page.outfile.format(
                diff1=diffDir1,
                diff2=diffDir2,
                dim1=dim1,
                dim2=dim2,
                layer=layer,
                layername=filename,
                prj=prj)

            webOut.write(out)

            with open(triptych, 'w') as triptychOut:

                t_out = custom_page.triptychHTML.format(
                    layername=filename,
                    diff1=diffDir1,
                    diff2=diffDir2,
                    dim1=dim1,
                    dim2=dim2,
                    plotDir=settings.plotDir,
                    layer=layer,
                    prj=prj)

                triptychOut.write(t_out)

                mod = layer.replace("_", ".")

                out = "\n".join(re.sub('status [1-9][0-9]', '', line) for line in stdout.splitlines() if mod in line)

                processed = processDiff(out, mod)
                processed += custom_page.twopane

                triptychOut.write(processed)

    webOut.write(custom_page.tail)


def processDiff(diffText, mod):

    keywords = [
        ("module ", "Modules", ("Component", "Reference", "Timestamp")),
        ("gr_text ", "Text", ("Text", "Position")),
        ("\\(via ", "Vias", ("Coordinate", "Size", "Drill", "Layers", "Net")),
        ("fp_text \\w+ ", "FP Text", ("Reference", "Coordinate")),
        ("\\(pad ", "Pads", ("Number", "Type", "Shape", "Coordinate", "Size", "Layers", "Ratio")),
        ("\\(gr_line ", "Graphics", ("Start", "End ", "Width", "Net")),
        ("\\(fp_arc", "Arcs", ("Start", "End ", "Angle", "Width")),
        ("\\(segment", "Segments", ("Start", "End ", "Width", "Net", "Timestamp")),
        ("\\(fp_circle", "Circles", ("Centre", "End ", "Width")),
    ]

    d = {
        "\\(start ": "<td>",
        "\\(end ": "<td>",
        "\\(width ": "<td>",
        "\\(tedit ": "<td>",
        "\\(tstamp ": "<td>",
        "\\(at ": "<td>",
        "\\(size ": "<td>",
        "\\(drill ": "<td>",
        "\\(layers ": "<td>",
        "\\(net ": "<td>",
        "\\(roundrect_rratio ": "<td>",
        "\\(angle ": "<td>",
        "\\(center ": "<td>",
        "\\)": "</td>",
        "user (\\w+)": r'<td>\1</td>',
        "reference (\\w+)": r'<td>\1</td>',
        "([0-9]) smd": r'<td>\1</td><td>Surface</td>',
        "roundrect": "<td>Rounded</td>",
        "rect": "<td>Rectangle</td>",
        "\\(([^ ]+) ": r'<td>\1</td>',
        "(?<=\")(.*)(?=\")": r'<td>\1</td>',
        "[\"]": r'',
        "[**]": r''
    }

    final = ""
    content = ""
    output = ""
    combined = ""
    tbL = ""
    tbR = ""
    checked = "checked"

    top1 = '''
        <input name='tabbed' id='tabbed{tabn}' type='radio' {checked}/>
        <section>
            <h1>
                <label for='tabbed{tabn}'>{label}</label>
            </h1>
            <div>
                {content}
            </div>
        </section>
    '''

    tsl = '''
        <div class='responsive'>
            <div class = 'tbl'>
                <table style="border-color: #aaaaaa; width: 100%; height: 2px;" border="2px" cellspacing="2px" cellpadding="3px">
    '''

    tsr = '''
        <div class='responsive'>
            <div class = 'tbr'>
                <table style="border-color: #aaaaaa; width: 100%; height: 2px;" border="2px" cellspacing="2px" cellpadding="3px">
    '''

    clearfix = '''
        <div class='clearfix'></div>
        <div style='padding:6px;'></div>
    '''

    for indx, layerInfo in enumerate(keywords):

        combined = tbL = tbR = ""

        for indx2, parameter in enumerate(layerInfo[2]):
            tbR = tbR + "<th>" + parameter + "</th>\n"
            tbL = tbL + "<th>" + parameter + "</th>\n"

        for line in diffText.splitlines():

            if re.search(layerInfo[0], line) and (mod in line):
                output = re.sub(layerInfo[0], "", line)
                output = output.replace("(layer " + mod + ")", "")

                for item, replace in d.items():
                    output = re.sub(item, replace, output)

                if output.count("<td>") == indx2:
                    output += "<td></td>\n"

                if output == "<td>":
                    output = ""

                output += "</tr>\n"

                if output[0] == ">":
                    tbL = tbL + "<tr>" + output[1:]

                elif output[0] == "<":
                    tbR = tbR + "<tr>" + output[1:]

        combined = tsl + tbL + "</table></div></div>\n" + tsr + tbR + "</table></div></div>\n"
        content = top1.format(tabn=indx, content=combined, label=layerInfo[1], checked=checked)
        checked = ""

        final = final + content

    final = "<div class = 'tabbed'>" + final + "</div>" + clearfix

    return(final)


def is_tool_available(name):
    from shutil import which
    return 1 if which(name) is not None else 0


class WebServerHandler(http.server.SimpleHTTPRequestHandler):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=os.path.realpath(os.path.join(prjctPath, settings.plotDir)), **kwargs)

    def log_message(self, format, *args):
        return

class Select(Toplevel):

    def __init__(self, parent=None):
        Toplevel.__init__(self, parent)
        # self.wm_title("Settings")
        Toplevel.withdraw(self)
        Toplevel.update(self)

        action = messagebox.askokcancel(
            self,
            message="Select the board file (*.kicad_pcb) file under version control",
            detail="Available: \n\n" + scm)

        self.update()

        if action == "cancel":
            self.quit()


def startWebServer(port, kicad_project_path):
    with socketserver.TCPServer(("", port), WebServerHandler) as httpd:
        url = 'http://127.0.0.1:' + str(port) + "/" + kicad_project_path + '/web/index.html'
        print("")
        print("Starting webserver at {}".format(url))
        print("(Hit Ctrl+C to exit)")
        webbrowser.open('http://127.0.0.1:' + str(port) + "/" + kicad_project_path + '/web/index.html')
        httpd.serve_forever()


def signal_handler(sig, frame):
    sys.exit(0)


def parse_cli_args():
    parser = argparse.ArgumentParser(description='Kicad PCB visual diffs.')
    parser.add_argument('-a', "--commit1", type=str, help="Commit 1")
    parser.add_argument('-b', "--commit2", type=str, help="Commit 2")
    parser.add_argument('-g', "--gui", action='store_true', help="Use gui")
    parser.add_argument('-s', "--scm", type=str, help="Select SCM (git, svn, fossil)")
    parser.add_argument('-d', "--display", type=str, help="Set DISPLAY value, default :1.0", default=':1.0')
    parser.add_argument('-p', "--port", type=int, help="Set webserver port", default=9092)
    parser.add_argument('-w', "--webserver-disable", action='store_true', help="Does not execute webserver (just generate images)")
    parser.add_argument('-v', '--verbose', action='count', default=0, help="Increase verbosity (-vvv)")
    parser.add_argument("kicad_pcb", metavar='PCB_PATH', nargs='?', help="Kicad PCB path")

    args = parser.parse_args()

    if args.verbose >= 3:
        print("")
        print("Command Line Arguments")
        print(args)

    return args


if __name__ == "__main__":

    signal.signal(signal.SIGINT, signal_handler)
    args = parse_cli_args()

    if args.kicad_pcb is None:
        kicad_project_path, board_file = select_project_gui(args.display)
    else:
        kicad_project_path = os.path.dirname(os.path.realpath(args.kicad_pcb))
        board_file = os.path.basename(os.path.realpath(args.kicad_pcb))

    project_scms = check_project_scms(kicad_project_path)

    if args.scm:
        scm_name = args.scm.lower()
    else:
        scm_name = project_scms[0]
    scm = generic.scm()
    if scm_name == "fossil":
        scm = fossil.scm()
    elif scm_name == "svn":
        scm = svn.scm()
    elif scm_name == "git":
        scm = git.scm()
    else:
        print(
            "This project is either not under version control"
            "or no SCM tool was was found in the PATH")
        sys.exit(1)

    prjctPath, kicad_project = scm.get_kicad_project_path(settings.escape_string(kicad_project_path))

    avaialble_scms = "" if len(project_scms) <= 1 else '(available: {})'.format(', '.join(map(str, project_scms)))
    print("")
    print("  SCM Selected:", scm_name, avaialble_scms)
    print("  Project PATH:", prjctPath)
    print(" Kicad Project:", kicad_project)
    print("    Board Name:", board_file)

    artifacts = scm.get_artefacts(settings.escape_string(prjctPath), kicad_project, board_file)

    if args.verbose > 1:
        print("")
        print("Commits list")
        for artifact in artifacts:
            if artifact != " ":
                print(artifact)

    if args.commit1 is None and args.commit2 is None:

        d1, d2 = runGUI(artifacts, board_file, kicad_project, prjctPath, scm_name)

        if not d1 or not d2:
            print("\nERROR: You must select both commits.")
            exit(1)
    else:
        if args.commit1 is None:
            d1 = artifacts[0]
        else:
            d1 = args.commit1

        if args.commit2 is None:
            d2 = artifacts[0]
        else:
            d2 = args.commit2

    print("")
    print(" Commit 1 (a):", d1)
    print(" Commit 2 (b):", d2)

    d1, d2, datetimes = scm.get_boards(d1, d2, board_file, kicad_project, prjctPath)

    svgDir1, svgDir2, boardDims1, boardDims2 = makeSVG(d1, d2, board_file, kicad_project, prjctPath)

    makeSupportFiles(board_file, kicad_project, prjctPath)

    makeOutput(svgDir1, svgDir2, board_file, kicad_project, prjctPath, datetimes, boardDims1, boardDims2)

    if not args.webserver_disable:
        startWebServer(args.port, kicad_project)
