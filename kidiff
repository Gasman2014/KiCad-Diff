#!/usr/bin/env python3
#
# A python script to select two revisions of a Kicad pcbnew layout
# held in a suitable version control repository and produce a graphical diff
# of generated svg files in a web browser.

import argparse
import os
import shutil
import time

import signal
import sys

import subprocess
from subprocess import PIPE, STDOUT, Popen

import tkinter as tk
from tkinter import *
from tkinter import filedialog, ttk
from tkinter.messagebox import showinfo
import tkUI
from tkUI import *

import webbrowser
import http.server
import socketserver
socketserver.TCPServer.allow_reuse_address = True

import assets.html_data as custom_page

if sys.version_info[0] >= 3:
    unicode = str

def _escape_string(val):
    val = unicode(val)
    val = val.replace( u'\\', u'\\\\' )
    val = val.replace( u' ', u'\\ ' )
    return ''.join(val.splitlines())


# 3rd Party and local tools, tools should be on the PATH
gitProg = 'git'
fossilProg = 'fossil'
svnProg = 'svn'
diffProg = 'diff'
grepProg = 'grep'
plotProg = 'plotpcb'

plotDir = 'kidiff'
webDir = 'web'

script_path = os.path.dirname(os.path.realpath(__file__))
assets_folder = script_path + "/" + 'assets'

# Adjust these colours to suit your requirements
layerCols = {
    'F_Cu'      : "#952927",
    'B_Cu'      : "#359632",
    'B_Paste'   : "#3DC9C9",
    'F_Paste'   : "#969696",
    'F_SilkS'   : "#339697",
    'B_SilkS'   : "#481649",
    'B_Mask'    : "#943197",
    'F_Mask'    : "#943197",
    'Edge_Cuts' : "#C9C83B",
    'Margin'    : "#D357D2",
    'In1_Cu'    : "#C2C200",
    'In2_Cu'    : "#C200C2",
    'In3_Cu'    : "#C20000",
    'In4_Cu'    : "#0000C2",
    'Dwgs_User' : "#0364D3",
    'Cmts_User' : "#7AC0F4",
    'Eco1_User' : "#008500",
    'Eco2_User' : "#C2C200",
    'B_Fab'     : "#858585",
    'F_Fab'     : "#C2C200",
    'B_Adhes'   : "#3545A8",
    'F_Adhes'   : "#A74AA8",
    'B_CrtYd'   : "#D3D04B",
    'F_CrtYd'   : "#A7A7A7",
}

Handler = http.server.SimpleHTTPRequestHandler


def getGitPath(prjctName, prjctPath):
    gitRootCmd = 'cd ' + _escape_string(prjctPath) + ' && ' + gitProg + ' rev-parse --show-toplevel'

    gitRootProcess = Popen(
        gitRootCmd,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = gitRootProcess.communicate()

    gitRoot = stdout.decode('utf-8')

    gitPathCmd = 'cd ' + _escape_string(gitRoot) + ' && ' + gitProg + ' ls-tree -r --name-only HEAD | ' + grepProg + ' -m 1 ' + prjctName

    gitPathProcess = Popen(
        gitPathCmd,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = gitPathProcess.communicate()

    gitPathProcess.wait()

    return _escape_string(stdout.decode('utf-8'))

def get_git_files(diff1, diff2, prjctName, kicad_project_path, prjctPath):
    '''Given two git artifacts, write out two kicad_pcb files to their respective
    directories (named after the artifact). Returns the date and time of both commits'''

    artifact1 = diff1[:6]
    artifact2 = diff2[:6]

    findDiff = \
        'cd ' + _escape_string(prjctPath) + ' && ' + \
        gitProg + ' diff --name-only ' + artifact1 + ' ' + artifact2 + ' . | ' + \
        grepProg + " " + kicad_project_path  + ' | ' + \
        grepProg + ' .kicad_pcb'

    changes = Popen(
        findDiff,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = changes.communicate()
    changes.wait()
    changed = (stdout.decode('utf-8'))

    if changed == '':
        print("No .kicad_pcb files differ between these commits")
        sys.exit()

    outputDir1 = prjctPath + '/' + plotDir + '/' + kicad_project_path + '/' + artifact1
    outputDir2 = prjctPath + '/' + plotDir + '/' + kicad_project_path + '/' + artifact2

    if not os.path.exists(outputDir1):
        os.makedirs(outputDir1)

    if not os.path.exists(outputDir2):
        os.makedirs(outputDir2)

    gitPath = getGitPath(_escape_string(kicad_project_path) + "/" + prjctName, _escape_string(prjctPath))

    gitArtifact1 = 'cd ' + _escape_string(prjctPath) + ' && ' + \
        gitProg + ' show ' + artifact1 + ':' + gitPath + ' > ' + \
        _escape_string(outputDir1) + '/' + prjctName

    gitArtifact2 = 'cd ' + _escape_string(prjctPath) + ' && ' + \
        gitProg + ' show ' + artifact2 + ':' + gitPath + ' > ' + _escape_string(outputDir2) + '/' + prjctName

    ver1 = Popen(
        gitArtifact1,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = ver1.communicate()

    ver2 = Popen(
        gitArtifact2,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = ver2.communicate()

    ver1.wait()
    ver2.wait()

    gitDateTime1 = 'cd ' + _escape_string(prjctPath) + ' && ' + gitProg + ' show -s --format="%ci" ' + artifact1
    gitDateTime2 = 'cd ' + _escape_string(prjctPath) + ' && ' + gitProg + ' show -s --format="%ci" ' + artifact2

    dt1 = Popen(
        gitDateTime1,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = dt1.communicate()
    dt1.wait()

    dateTime1 = stdout.decode('utf-8')
    date1, time1, UTC = dateTime1.split(' ')

    dt2 = Popen(
        gitDateTime2,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = dt2.communicate()
    dt2.wait()

    dateTime2 = stdout.decode('utf-8')
    date2, time2, UTC = dateTime2.split(' ')

    time1 = date1 + " " + time1
    time2 = date2 + " " + time2

    return time1 + " " + time2


def getSVNDiff(diff1, diff2, prjctName, prjctPath):
    '''Given two SVN revisions, write out two kicad_pcb files to their respective
    directories (named after the revision number). Returns the date and time of both commits'''

    svnChanged = 'cd ' + prjctPath + ' && svn diff --summarize -r ' + \
        diff1 + ':' + diff2 + ' ' + prjctName

    changed = Popen(
        svnChanged,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = changed.communicate()
    changed.wait()

    changed, *boardName = (stdout.decode('utf-8'))

    if changed != 'M':
        print("No .kicad_pcb files differ between these commits")
        sys.exit()

    outputDir1 = prjctPath + plotDir + '/' + diff1
    outputDir2 = prjctPath + plotDir + '/' + diff2

    if not os.path.exists(outputDir1):
        os.makedirs(outputDir1)

    if not os.path.exists(outputDir2):
        os.makedirs(outputDir2)

    SVNdiffCmd1 = 'cd ' + prjctPath + ' && svn cat -r ' + diff1 + \
        " " + prjctName + ' > ' + outputDir1 + '/' + prjctName
    SVNdiffCmd2 = 'cd ' + prjctPath + ' && svn cat -r ' + diff2 + \
        " " + prjctName + ' > ' + outputDir2 + '/' + prjctName

    ver1 = Popen(
        SVNdiffCmd1,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = ver1.communicate()

    ver2 = Popen(
        SVNdiffCmd2,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = ver2.communicate()

    ver1.wait(); ver2.wait()

    dateTime1 = 'cd ' + prjctPath + ' && svn log -r' + diff1
    dateTime2 = 'cd ' + prjctPath + ' && svn log -r' + diff2

    dt1 = Popen(
        dateTime1,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = dt1.communicate()

    dt1.wait()
    dateTime = stdout.decode('utf-8')
    cmt = (dateTime.splitlines()[1]).split('|')
    _, SVNdate1, SVNtime1, SVNutc, *_ = cmt[2].split(' ')

    dt2 = Popen(
        dateTime2,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = dt2.communicate()
    dt2.wait()
    dateTime = stdout.decode('utf-8')
    cmt = (dateTime.splitlines()[1]).split('|')
    _, SVNdate2, SVNtime2, SVNutc, *_ = cmt[2].split(' ')

    times = SVNdate1 + " " + SVNtime1 + " " + SVNdate2 + " " + SVNtime2
    # print(times)

    return (times)


def getFossilDiff(diff1, diff2, prjctName, prjctPath):
    '''Given two Fossil artifacts, write out two kicad_pcb files to their respective
    directories (named after the artifacts). Returns the date and time of both commits'''

    artifact1 = diff1[:6]
    artifact2 = diff2[:6]

    findDiff = 'cd ' + _escape_string(prjctPath) + ' && fossil diff --brief -r ' + \
        artifact1 + ' --to ' + artifact2 + ' | ' + grepProg + ' .kicad_pcb'

    changes = Popen(
        findDiff,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = changes.communicate()
    changes.wait()

    changed = (stdout.decode('utf-8'))
    # print(changed)
    if changed == '':
        print("No .kicad_pcb files differ between these commits")
        sys.exit()

    outputDir1 = prjctPath + plotDir + '/' + artifact1
    outputDir2 = prjctPath + plotDir + '/' + artifact2

    if not os.path.exists(outputDir1):
        os.makedirs(outputDir1)

    if not os.path.exists(outputDir2):
        os.makedirs(outputDir2)

    fossilArtifact1 = 'cd ' + _escape_string(prjctPath) + ' && fossil cat ' + _escape_string(prjctPath) + '/' + prjctName + \
        ' -r ' + artifact1 + ' > ' + outputDir1 + '/' + prjctName
    fossilArtifact2 = 'cd ' + _escape_string(prjctPath) + ' && fossil cat ' + _escape_string(prjctPath) + '/' + prjctName + \
        ' -r ' + artifact2 + ' > ' + outputDir2 + '/' + prjctName

    fossilInfo1 = 'cd ' + _escape_string(prjctPath) + ' && fossil info ' + artifact1
    fossilInfo2 = 'cd ' + _escape_string(prjctPath) + ' && fossil info ' + artifact2

    ver1 = Popen(
        fossilArtifact1,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = ver1.communicate()
    ver1.wait()

    info1 = Popen(
        fossilInfo1,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = info1.communicate()
    info1.wait()

    dateTime = stdout.decode('utf-8')
    dateTime = dateTime.strip()
    uuid, _, _, _, _, _, _, _, _, artifactRef, dateDiff1, timeDiff1, *junk1 = dateTime.split(
        " ")

    ver2 = Popen(
        fossilArtifact2,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = ver2.communicate()
    ver2.wait()

    info2 = Popen(
        fossilInfo2,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = info2.communicate()
    info2.wait()

    dateTime = stdout.decode('utf-8')
    dateTime = dateTime.strip()
    uuid, _, _, _, _, _, _, _, _, artifactRef, dateDiff2, timeDiff2, *junk1 = dateTime.split(
        " ")

    dateTime = dateDiff1 + " " + timeDiff1 + " " + dateDiff2 + " " + timeDiff2

    # print(dateTime)

    return dateTime


def getProject(display, SCMS):
    '''File select dialogue. Opens Tk File browser and
    selector set for .kicad_pcb files. Returns path and file name
    '''
    gui = tk.Tk(display, SCMS)
    gui.withdraw()
    gui.update()
    select = Select(gui)
    select.destroy()

    selected = tk.filedialog.askopenfile(
        initialdir="~/",
        title="Select a board file (*.kicad_pcb) file under version control",
        filetypes=(("KiCad PCB files", "*.kicad_pcb"), ("all files", "*.*")))
    if selected:
        path, prjct = os.path.split(selected.name)

    gui.destroy()
    return (path, prjct)


def getSCM(prjctPath):
    '''Determines which SCM methodology is in place when passed the enclosing
    directory. NB there is no facility to deal with directories with multiple VCS in place
    and current order of priority is Git > Fossil > SVN.
    Easy to add additional SCMs but also would need to write handling code
    '''

    scm = ''

    # check if SVN program installed and then check if *.kicad_pcb is in a SVN checkout
    if (svnProg != ''):
        svnCmd = 'cd ' + prjctPath + ' && ' + svnProg + ' log | perl -l4svn log0pe "s/^-+/\n/"'
        svn = Popen(
            svnCmd,
            shell=True,
            stdin=PIPE,
            stdout=PIPE,
            stderr=PIPE,
            close_fds=True)
        stdout, stderr = svn.communicate()
        svn.wait()
        if ((stdout.decode('utf-8') != '') & (stderr.decode('utf-8') == '')):
            scm = 'SVN'

    # check if Fossil program installed and then check if *.kicad_pcb is in a Fossil checkout
    if (fossilProg != ''):
        fossilCmd = 'cd ' + prjctPath + ' && ' + fossilProg + ' status'
        fossil = Popen(
            fossilCmd,
            shell=True,
            stdin=PIPE,
            stdout=PIPE,
            stderr=PIPE,
            close_fds=True)
        stdout, stderr = fossil.communicate()
        fossil.wait()
        # print(stdout.decode('utf-8'),"stdERROR=", stderr.decode('utf-8'))
        if (stdout.decode('utf-8') != ''):
            scm = 'Fossil'

    # Check if Git program installed and then check if *.kicad_pcb is in a Git checkout
    if (gitProg != ''):
        gitCmd = 'cd ' + prjctPath + ' && ' + gitProg + ' status'
        git = Popen(
            gitCmd,
            shell=True,
            stdin=PIPE,
            stdout=PIPE,
            stderr=PIPE,
            close_fds=True)
        stdout, stderr = git.communicate()
        git.wait()
        if ((stdout.decode('utf-8') != '') & (stderr.decode('utf-8') == '')):
            scm = 'Git'

    return scm


def get_fossil_artefacts(path, kicadPCB):
    '''Returns list of Fossil artifacts from a directory containing a
    *.kiartefacts file.'''

    # NOTE Assemble a get_svn_artefacts of artefacts. Unfortunatly, Fossil doesn't give any easily configurable length.
    # NOTE Using the -W option results in multiline diffs
    # NOTE 'fossil -finfo' looks like this
    # 2017-05-19 [21d331ea6b] Preliminary work on CvPCB association and component values (user: johnpateman, artifact: [1100d6e077], branch: Ver_3V3)
    # 2017-05-07 [2d1e20f431] Initial commit (user: johnpateman, artifact: [24336219cc], branch: trunk)
    # NOTE 'fossil -finfo -b' looks like this
    # 21d331ea6b 2017-05-19 johnpate Ver_3V3 Preliminary work on CvPCB association a
    # 2d1e20f431 2017-05-07 johnpate trunk Initial commit
    # TODO Consider parsing the output of fossil finfo and split off date, artifactID, mesage, user and branch

    fossilCmd = 'cd ' + path + ' && ' + fossilProg + ' finfo -b ' + kicadPCB

    fossil = Popen(
        fossilCmd,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, _ = fossil.communicate()
    fossil.wait()
    line = (stdout.decode('utf-8').splitlines())
    # fArtifacts = [a.replace(' ', '       ', 4) for a in line]
    fArtifacts = [a.replace(' ', '\t', 4) for a in line]

    a, *tail = fArtifacts.split(' |')
    d = a[1:]

    return d


def get_kicad_project_path(prjctPath):

    gitRootCmd = 'cd ' + _escape_string(prjctPath) + ' && ' + gitProg + ' rev-parse --show-toplevel'
    gitRootProcess = Popen(
        gitRootCmd,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = gitRootProcess.communicate()
    gitRoot = stdout.decode('utf-8').strip()

    kicad_project_path = os.path.relpath(prjctPath, gitRoot)

    return gitRoot, kicad_project_path


# def get_git_artefacts(path, kicadPCB, kicad_project_path):
def get_git_artefacts(path, kicadPCB):
    '''Returns list of Git artifacts from a directory containing a
    *.kicad_pcb file.'''

    gitCmd = 'cd ' + path + ' && ' + gitProg + ' log --pretty=format:"%h | %s"'

    git = Popen(
        gitCmd,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, _ = git.communicate()
    git.wait()
    gArtifacts = (stdout.decode('utf-8').splitlines())
    return gArtifacts


def get_svn_artefacts(path, kicadPCB):
    '''Returns list of SVN resvisions from a directory containing a
    *.kicad_pcb file.'''
    svnCmd = 'cd ' + path + ' && ' + svnProg + ' log -r HEAD:0 | perl -l40pe "s/^-+/\n/"'

    svn = Popen(
        svnCmd,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)
    stdout, stderr = svn.communicate()
    svn.wait()
    sArtifacts = (stdout.decode('utf-8').splitlines())
    sArtifacts = list(filter(None, sArtifacts))
    return sArtifacts


def makeSVG(d1, d2, prjctName, kicad_project_path, prjctPath):
    '''Hands off required .kicad_pcb files to "plotPCB2.py"
    and generate .svg files. Routine is
    v quick so all layers are plotted to svg.'''

    print("")
    print("Generating images")

    d1 = d1[:6]
    d2 = d2[:6]

    # Diff1 = prjctPath + '/' + plotDir + '/' + kicad_project_path + "/" + prjctName
    # Diff2 = prjctPath + '/' + plotDir + '/' + kicad_project_path + "/" + prjctName

    d1SVG = prjctPath + '/' + plotDir + '/' + kicad_project_path + "/" + d1
    d2SVG = prjctPath + '/' + plotDir + '/' + kicad_project_path + "/" + d2

    Diff1 = d1SVG + "/" + prjctName
    Diff2 = d2SVG + "/" + prjctName

    if not os.path.exists(d1SVG):
        os.makedirs(d1SVG)

    if not os.path.exists(d2SVG):
        os.makedirs(d2SVG)

    plot1Cmd = plotProg + ' ' + _escape_string(Diff1) + ' -o ' + _escape_string(d1SVG)
    plot2Cmd = plotProg + ' ' + _escape_string(Diff2) + ' -o ' + _escape_string(d2SVG)

    plot1=Popen(
        plot1Cmd,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)

    stdout, stderr = plot1.communicate()
    plotDims1 = (stdout.decode('utf-8').splitlines())
    errors = stderr.decode('utf-8')

    if errors != "":
        print(stdout.decode('utf-8'))
        print("Plot1 error: " + errors)
        exit(1)

    plot2=Popen(
        plot2Cmd,
        shell=True,
        stdin=PIPE,
        stdout=PIPE,
        stderr=PIPE,
        close_fds=True)

    stdout, stderr = plot2.communicate()
    plotDims2 = (stdout.decode('utf-8').splitlines())
    errors = stderr.decode('utf-8')

    if errors != "":
        print(stdout.decode('utf-8'))
        print("Plot2 error: " + errors)
        exit(1)

    plot1.wait()
    plot2.wait()

    if not plotDims1 or not plotDims2:
        print('ERROR: Something happened with plotpcb')
        exit(1)

    return (d1, d2, plotDims1[0], plotDims2[0])


def makeSupportFiles(prjctName, kicad_project_path, prjctPath):
    '''
    Setup web directories for output
    '''

    webd = prjctPath + "/" + plotDir + "/" + kicad_project_path + "/" + webDir
    webIndex = webd + '/index.html'
    webStyle = webd + '/style.css'

    if not os.path.exists(webd):
        os.makedirs(webd)
        os.makedirs(webd + '/triptych')

    stylesheet = assets_folder + "/" + "style.css"
    shutil.copyfile(stylesheet, webStyle)

    if os.path.exists(webIndex):
        os.remove(webIndex)

    return

def getBoardData(board):
    '''Takes a board reference and returns the
    basic parameters from it.
    Might be safer to split off the top section
    before the modules to avoid the possibility of
    recyling keywords like 'title' '''

    prms = {
        'title': "",
        'rev': "",
        'company': "",
        'date': "",
        'page': "",
        'thickness': 0,
        'drawings': 0,
        'tracks': 0,
        'zones': 0,
        'modules': 0,
        'nets': 0
    }

    thickDone = False

    with open(board, 'r') as f:
        for line in f:
            words = line.strip("\t ()").split()
            for key in prms:
                if len(words) > 1:
                    if key == words[0]:
                        complete =""
                        for i in range(1,len(words)):
                            complete += words[i].strip("\t ()").replace("\"","") + " "
                        prms[key] = complete
    return(prms)

def makeOutput(diffDir1, diffDir2, prjctName, kicad_project_path, prjctPath, times, dim1, dim2):
    '''Write out HTML using template. Iterate through files in diff directories, generating
    thumbnails and three way view (triptych) page.
    '''

    webd = prjctPath + "/" + plotDir + "/" + kicad_project_path + "/" + webDir
    webIndex = webd + '/index.html'

    board1 = prjctPath + "/" + plotDir + "/" + kicad_project_path + "/" + diffDir1 + "/" + prjctName
    board2 = prjctPath + "/" + plotDir + "/" + kicad_project_path + "/" + diffDir2 + "/" + prjctName

    webOut = open(webIndex, 'w')

    D1DATE, D1TIME, D2DATE, D2TIME = times.split(" ")

    board_1_Info = getBoardData(board1)
    board_2_Info = getBoardData(board2)

    TITLE = board_1_Info.get('title')
    DATE = board_1_Info.get('date')
    COMPANY = board_1_Info.get('company')

    THICK1 = board_1_Info.get('thickness')
    DRAWINGS1 = board_1_Info.get('drawings')
    TRACKS1 = board_1_Info.get('tracks')
    ZONES1 = board_1_Info.get('zones')
    MODULES1 = board_1_Info.get('modules')
    NETS1 = board_1_Info.get('nets')

    THICK2 = board_2_Info.get('thickness')
    DRAWINGS2 = board_2_Info.get('drawings')
    TRACKS2 = board_2_Info.get('tracks')
    ZONES2 = board_2_Info.get('zones')
    MODULES2 = board_2_Info.get('modules')
    NETS2 = board_2_Info.get('nets')

    index=custom_page.indexHead.format(
    TITLE=TITLE,
    DATE=DATE,
    COMPANY=COMPANY,
    diffDir1=diffDir1,
    diffDir2=diffDir2,
    THICK1=THICK1,
    THICK2=THICK2,
    D1DATE=D1DATE,
    D2DATE=D2DATE,
    DRAWINGS1=DRAWINGS1,
    DRAWINGS2=DRAWINGS2,
    D1TIME=D1TIME,
    D2TIME=D2TIME,
    TRACKS1=TRACKS1,
    TRACKS2=TRACKS2,
    ZONES1=ZONES1,
    ZONES2=ZONES2,
    MODULES1=MODULES1,
    MODULES2=MODULES2,
    NETS1=NETS1,
    NETS2=NETS2,
    )

    webOut.write(index)

    diffCmnd1 = ()

    source = prjctPath + "/" + plotDir + "/" + kicad_project_path + "/" + diffDir1 + "/"
    triptychDir = prjctPath + "/" + plotDir + "/" + kicad_project_path + "/" + "web" + "/" + 'triptych'

    if not os.path.exists(triptychDir):
        os.makedirs(triptychDir)

    # diffs = os.fsencode(source)

    for f in os.listdir(source):
        filename = os.fsdecode(f)

        if filename.endswith(".svg"):
            # print(filename)
            file, file_extension = os.path.splitext(filename)
            triptych = triptychDir + '/' + file + '.html'
            *project, layer = filename.split('-')
            layer, ext = layer.split('.')
            prjct, ext = filename.split('.')
            splitted = prjct.split('-') # Accounts for project names containing hyphens
            prj = "-".join(splitted[0:-1])
            layer = splitted[-1]
            out=custom_page.outfile.format(
                diff1=diffDir1,
                diff2=diffDir2,
                dim1=dim1,
                dim2=dim2,
                layer=layer,
                layername=filename,
                prj=prj)

            webOut.write(out)

            triptychOut = open(triptych, 'w')

            t_out = custom_page.triptychHTML.format(
                layername=filename,
                diff1=diffDir1,
                diff2=diffDir2,
                dim1=dim1,
                dim2=dim2,
                plotDir=plotDir,
                layer=layer,
                prj=prj)

            triptychOut.write(t_out)

            diffbase = diffProg + " " + '{prjctPath}/{plotDir}/{kicad_project_path}/{diff2}/*.kicad_pcb {prjctPath}/{plotDir}/{kicad_project_path}/{diff1}/*.kicad_pcb >> {prjctPath}/{plotDir}/{kicad_project_path}/diff.txt'

            if not diffCmnd1:
                diffCmnd1 = diffbase.format(
                    plotDir=plotDir,
                    diff1=diffDir1,
                    diff2=diffDir2,
                    prjctPath=_escape_string(prjctPath),
                    kicad_project_path=kicad_project_path)

                diff1Txt = Popen(
                    diffCmnd1,
                    shell=True,
                    stdin=PIPE,
                    stdout=PIPE,
                    stderr=PIPE,
                    close_fds=True)
                stdout, stderr = diff1Txt.communicate()
                diff1Txt.wait()

            mod = layer.replace("_", ".")

            diffCmnd2 = diffProg + " " + "--suppress-common-lines {prjctPath}/{plotDir}/{kicad_project_path}/{diff2}/*.kicad_pcb {prjctPath}/{plotDir}/{kicad_project_path}/{diff1}/*.kicad_pcb | {grepProg} {mod} | sed \'s/(status [1-9][0-9])//g\'".format(
                layername=filename,
                plotDir=plotDir,
                diff1=diffDir1,
                diff2=diffDir2,
                kicad_project_path=kicad_project_path,
                prjctPath=_escape_string(prjctPath),
                mod=mod,
                grepProg=grepProg,
                webDir=webDir)

            diff2Txt = Popen(
                    diffCmnd2,
                    shell=True,
                    stdin=PIPE,
                    stdout=PIPE,
                    stderr=PIPE,
                    close_fds=True)
            stdout, stderr = diff2Txt.communicate()
            diff2Txt.wait()
            out = stdout.decode('utf8')

            processed = processDiff(out, mod)
            processed += custom_page.twopane

            triptychOut.write(processed)

    webOut.write(custom_page.tail)


def processDiff(diffText, mod):

    keywords=[
        ("(module ","Modules",("Component","Reference","Timestamp")),
        ("(gr_text ","Text",("Text","Position")),
        ("(via ","Vias",("Coordinate","Size","Drill","Layers","Net")),
        ("(fp_text ","FP Text",("Reference","Coordinate")),
        ("(pad ","Pads",("Number","Type","Shape","Coordinate","Size","Layers","Ratio")),
        ("(gr_line ","Graphics",("Start","End ","Width","Net")),
        ("(fp_arc","Arcs",("Start","End ","Angle","Width")),
        ("(segment","Segments",("Start","End ","Width","Net","Timestamp")),
        ("(fp_circle","Circles",("Centre","End ","Width")),
    ]

    d={
        "\(start ":"<td>",
        "\(end ":"<td>",
        "\(width ":"<td>",
        "\(tedit ":"<td>",
        "\(tstamp ":"<td>",
        "\(at ":"<td>",
        "\(size ":"<td>",
        "\(drill ":"<td>",
        "\(layers ":"<td>",
        "\(net ":"<td>",
        "\(roundrect_rratio ":"<td>",
        "\(angle ":"<td>",
        "\(center ":"<td>",
        "\)":"</td>",
        "user (\w+)":r'<td>\1</td>',
        "reference (\w+)":r'<td>\1</td>',
        "([0-9]) smd":r'<td>\1</td><td>Surface</td>',
        "roundrect":"<td>Rounded</td>",
        "rect":"<td>Rectangle</td>",
        "(\w.+):(\w.+)":r'<td>\1 \2</td>',
        "(?<=\")(.*)(?=\")":r'<td>\1</td>',
        "[\"]":r'',
        "[**]":r'',
        }

    final =""
    content = ""
    output = ""
    combined = ""
    header = ""
    tbL = ""
    tbR = ""
    checked = "checked"


    top1='''<input name='tabbed' id='tabbed{tabn}' type='radio' {checked}><section><h1><label for='tabbed{tabn}'>{label}</label></h1><div>{content}</div></section>'''
    tsl='''<div class='responsive'>
                <div class = 'tbl'>
                    <table style="border-color: #aaaaaa; width: 100%; height: 2px;" border="2px" cellspacing="2px" cellpadding="3px">'''
    tsr='''<div class='responsive'>
                <div class = 'tbr'>
                    <table style="border-color: #aaaaaa; width: 100%; height: 2px;" border="2px" cellspacing="2px" cellpadding="3px">'''
    clearfix ='''<div class='clearfix'>
                </div>
                <div style='padding:6px;'>
                </div>'''


    for indx,layerInfo in enumerate(keywords):
        combined = tbL = tbR = ""
        for indx2,parameter in enumerate(layerInfo[2]):
            tbR = tbR + "<th>" + parameter + "</th>"
            tbL = tbL + "<th>" + parameter + "</th>"
        for line in diffText.splitlines():
            if ((layerInfo[0] in line) and (mod in line)):
                output = line.replace(layerInfo[0], "")
                output = output.replace("(layer " + mod + ")", "")
                # print(output)
                for item in d.keys():
                    output = re.sub(item, d[item], output)

                if output.count("<td>") == indx2:
                    output += "<td></td>"
                if output == "<td>":
                    output = ""
                output += "</tr>"
                # print(output)

                if output[0]==">":
                    tbL = tbL + "<tr>" + output[1:]
                elif output[0] == "<":
                    tbR = tbR + "<tr>" + output[1:]

        combined = tsl + tbL + "</table></div></div>" + tsr + tbR + "</table></div></div>"
        content = top1.format(tabn=indx,content=combined,label=layerInfo[1],checked=checked)
        checked=""

        final = final + content
    final = "<div class = 'tabbed'>"+ final + "</div>" + clearfix
    return(final)


def popup_showinfo(progress):
    display = 'Processing: ' + progress
    p = Label(gui, Text=display)
    p.pack()


def scmAvailable():
    scms = ''
    if (fossilProg != ''):
        scms = scms + "Fossil" + "\n"
    if (gitProg != ''):
        scms = scms + "Git" + "\n"
    if (svnProg != ''):
        scms = scms + "SVN"

    return (scms)


class Handler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=os.path.realpath(prjctPath + "/" + plotDir), **kwargs)


class Select(tk.Toplevel):
    def __init__(self, parent):
        tk.Toplevel.__init__(self, parent)
        tk.Toplevel.withdraw(self)
        tk.Toplevel.update(self)
        action = messagebox.askokcancel(
            self,
            message="Select the board file (*.kicad_pcb) file under version control",
            detail="Available: \n\n" + scm)
        self.update()
        if action == "cancel":
            self.quit()


def startWebServer(port, kicad_project_path):
    with socketserver.TCPServer(("", port), Handler) as httpd:
        print("Serving at port", port)
        webbrowser.open('http://127.0.0.1:' + str(port) + "/" + kicad_project_path + '/web/index.html')
        httpd.serve_forever()


def parse_cli_args():
    parser = argparse.ArgumentParser(description='Kicad PCB visual diffs.')
    parser.add_argument('-a', "--commit1", type=str, help="Commit 1")
    parser.add_argument('-b', "--commit2", type=str, help="Commit 2")
    parser.add_argument('-d', "--display", type=str, help="Set DISPLAY value, default :1.0", default=':1.0')
    parser.add_argument('-p', "--port", type=int, help="Set webserver port", default=9092)
    parser.add_argument('-s', "--scm", type=str,  help="Select SCM (git, svn, fossil)")
    parser.add_argument('-g', "--gui", action='store_true', help="Use gui")
    parser.add_argument('-w', "--webserver-disable", action='store_true', help="Does not execute webserver (just generate images)")
    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument("kicad_pcb", metavar='PCB_PATH', nargs='?', help="Kicad PCB path")
    args = parser.parse_args()

    if args.verbose == 3:
        print(args)

    return args


def signal_handler(sig, frame):
    sys.exit(0)

if __name__ == "__main__":

    signal.signal(signal.SIGINT, signal_handler)

    args = parse_cli_args()

    if args.scm:
        scm = args.scm.lower()
    else:
        scm = scmAvailable()
        if (scm == ""):
            print("You need to set the SCM (git, fossil, svn) used")
            exit(1)

    if args.kicad_pcb is None:
        prjctPath, prjctName = getProject(args.display, scm)
    else:
        prjctPath = os.path.dirname(os.path.realpath(args.kicad_pcb))
        prjctName = os.path.basename(os.path.realpath(args.kicad_pcb))

    if scm == 'fossil':
        kicad_project_path = "./"
    elif scm == 'git':
        prjctPath, kicad_project_path = get_kicad_project_path(_escape_string(prjctPath))
    elif scm == 'svn':
        kicad_project_path = "./"
    elif scm == '':
        print(
            "This project is either not under version control"
            "or no SCM tool was was found in the PATH")
        sys.exit(1)

    if args.verbose == 1:
        print("")
        print(" Project PATH:", prjctPath)
        print("Kicad Project:", kicad_project_path)
        print("   Board Name:", prjctName)

    if scm == 'fossil':
        artifacts = get_fossil_artefacts(_escape_string(prjctPath), prjctName)
    elif scm == 'git':
        # artifacts = get_git_artefacts(_escape_string(prjctPath), prjctName, kicad_project_path)
        artifacts = get_git_artefacts(_escape_string(prjctPath), prjctName)
    elif scm == 'svn':
        artifacts = get_svn_artefacts(_escape_string(prjctPath), prjctName)

    if args.commit1 is None and args.commit2 is None:
        d1, d2 = tkUI.runGUI(artifacts, prjctName, kicad_project_path, prjctPath, scm)
        if not d1 or not d2:
            print("\nERROR: You must select 2 commits!")
            exit(1)
    else:
        if args.commit1 is None:
            d1 = artifacts[0]
        else:
            d1 = args.commit1

        if args.commit2 is None:
            d2 = artifacts[0]
        else:
            d2 = args.commit2

    if args.verbose == 1:
        print("")
        print(" Commit 1 (a):", d1.split(' ')[0])
        print(" Commit 2 (b):", d2.split(' ')[0])

    if scm == 'fossil':
        times = getFossilDiff(d1, d2, prjctName, prjctPath)
    elif scm == 'git':
        times = get_git_files(d1, d2, prjctName, kicad_project_path, prjctPath)
    elif scm == 'svn':
        times = getSVNDiff(d1, d2, prjctName, prjctPath)

    svgDir1, svgDir2, boardDims1, boardDims2 = makeSVG(d1, d2, prjctName, kicad_project_path, prjctPath)

    makeSupportFiles(prjctName, kicad_project_path, prjctPath)

    makeOutput(svgDir1, svgDir2, prjctName, kicad_project_path, prjctPath, times, boardDims1, boardDims2)

    if not args.webserver_disable:
        startWebServer(args.port, kicad_project_path)
